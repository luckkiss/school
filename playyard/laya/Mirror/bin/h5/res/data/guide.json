{"desc":"Root.as","detail":"游戏入口，相当于整个游戏的壳。负责根据当前平台，选择创建对应的主程序入口。比如，针对微信、QQ玩吧分别创建对应的主程序入口WxRoot、WbRoot。不同平台的入口，仅有些许差别，比如平台礼包、登录。","children":[{"desc":"RootBase","detail":"主程序入口基类。WxRoot、WbRoot均继承自RootBase。其主要负责初始化Laya，已经创建主程序（SubRoot）","children":[{"desc":"SubRoot.as","detail":"主程序。","children":[{"desc":"Global","detail":"全局总管理器，管理整个游戏所有模块或管理器，比如UI管理器、数据管理器等。","children":[{"desc":"UIManager","detail":"UI管理器，负责管理所有UI界面，包括分层、创建、打开、关闭、销毁、查询等。","children":[{"desc":"CommonForm","detail":"面板基类，主要实现了面板图集和字体的自动加载。所有面板都必须继承自CommonForm，并通过Global.uimgr.createForm进行创建。","interfaces":[{"name":"layer","info":"声明面板的层级。游戏中的面板是分层显示的。常见的层级有UILayer.Normal和UILayer.Second，分别对应一级面板和二级面板。"},{"name":"resPath","info":"声明关联的UI定义。当创建面板时，将根据这个声明去查找哪些图集需要预加载。"},{"name":"initElements","info":"创建并初始化UI，比如设置list、为按钮添加事件监听等。"},{"name":"onOpen","info":"界面打开后调用此函数，通常在此刷新界面显示。"},{"name":"onClose","info":"界面关闭前调用此函数，通常在此执行某些清理工作。这个接口不是必须重写的，因为定时器清除、移除模型等常见清理任务均已由CommonForm代劳。"},{"name":"_open","info":"打开面板。注意这个接口是protected，意味着外部无法直接调用。所有继承自CommonForm的子类均需提供一个open函数并接收各自所需的参数，并在函数体内调用_open"}],"cases":["ActTipView"]}],"children":[{"desc":"TabForm","detail":"页签面板基类。TabForm继承自CommonForm，是一个具有页签按钮组的CommonForm。TabForm仅仅是一个带Tab的壳面板，其各个子页签均是独立制作的，且仅仅在打开指定页签时才会进行加载并初始化。你只需将各个子页签面板的类定义传入TabForm的构造函数即可。","interfaces":[{"name":"getTabFormByID","info":"通过id取得对应的子面板。"},{"name":"getCurrentTab","info":"获取当前正在显示的子面板。"},{"name":"switchTabFormById","info":"切换到指定id的子面板。你还可以同时传递任意参数给该子面板。"},{"name":"setTabTipMarkById","info":"让指定id对应的页签按钮显示一个小红点，用来提示玩家。"}]}]},{"desc":"DataManager","detail":"数据管理器，负责管理所有数据，比如玩家数据、各模块数据等。","children":[{"desc":"NetModule","detail":"网络模块，负责与服务器进行通信。通过Global.ModuleMgr.NetModule进行访问。","interfaces":[{"name":"sendMsg","info":"向服务器发送协议。"}]}]},{"desc":"ModuleManager","detail":"模块管理器，负责管理所有模块。我们将游戏中的各个功能拆分出来，称为模块，比如背包、场景、副本、活动等模块。所有模块在一开始便已创建出来"},{"desc":"UnitManager","detail":"单位管理器，负责管理场景中的所有单位，包括玩家、NPC、怪物、特效等。","interfaces":[{"name":"hero","info":"获取主角控制器HeroController"}],"children":[{"desc":"HeroController","detail":"主角控制器，继承自RoleController（玩家控制器）。负责控制主角走路、施放技能等。"}]},{"desc":"ActBtnController","detail":"活动按钮控制器，负责管理右上角的活动按钮，包括显示和隐藏、按钮状态、排版等。","interfaces":[{"name":"update","info":"刷新活动按钮。由于触发刷新的因素很多，比如背包物品变更、主角等级变化、主角任务进度变化、日期变化等，而在同一个时刻内，某个操作可能同时触发多个因素，进而导致高频度调用update。因此update采用了懒惰更新策略。即调用update接口后，并不会立即刷新按钮的显示，而是打一个脏标记。同时，后台有1个定时器，定期检查是否需要重新刷新显示。","children":[{"desc":"BaseFuncIconCtrl","detail":"特定按钮控制器的基类，ActBtnController管理着多个BaseFuncIconCtrl。每个BaseFuncIconCtrl对应一个按钮。因此，增加按钮则需要增加一个继承自BaseFuncIconCtrl的特定按钮控制器","interfaces":[{"name":"onStatusChange","info":"策划可以通过功能表配置某个功能的开启条件，比如主角达到某个等级、接受或者完成某个任务，以及所处服务器开服第几天等。针对这些条件，ActBtnController已经做了统一处理。假如某个按钮还有一些额外的判断逻辑，比如动态地根据主角的状态决定按钮是否显示，则需要重写此接口，根据具体的逻辑处理按钮显示与否，或者处理是否在按钮上显示小红点提示的逻辑。"},{"name":"handleClick","info":"处理点击按钮之后的相应逻辑。"}],"cases":["DailyRechargeCtrl","FuLiDaTingCtrl"]}]}]},{"desc":"MapManager","detail":"地图管理器，负责地图上的寻路等。","interfaces":[{"name":"goToPos","info":"寻路到指定的场景中的某个位置"}]},{"desc":"ResourceManager","detail":"资源管理器，负责各类资源文件的加载，比如各类模型。","interfaces":[{"name":"getUnitUrlByID","info":"查询指定ID对应的模型文件的URL。"},{"name":"getDependResources","info":"解析UI文件的信息，得出面板依赖的图集信息。"}]}]}]}]}]}